datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String? 
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  takes          Take[]
  arguments      Argument[]
  votes          Vote[]
  followedUsers  Follow[]  @relation("FollowingUsers")
  followingUsers Follow[]  @relation("FollowerUsers")
  followedTopics Topic[]   @relation("UserFollowedTopics")
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
//Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Take {
  id        Int        @id @default(autoincrement())
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  status    TakeStatus
  content   String
  topics    Topic[]    @relation("TakeTopics")
  arguments Argument[]
  createdAt DateTime   @default(now())
  closedAt  DateTime?
}

model Argument {
  id        Int        @id @default(autoincrement())
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  take      Take       @relation(fields: [takeId], references: [id])
  takeId    Int
  type      ArgumentType
  content   String
  votes     Vote[]
  createdAt DateTime   @default(now())
}

model Vote {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  argument   Argument   @relation(fields: [argumentId], references: [id])
  argumentId Int
  value      Int        // 1 for upvote, -1 for downvote
  createdAt  DateTime   @default(now())

  @@unique([userId, argumentId]) // Prevents duplicate votes per argument
}

model Topic {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  takes     Take[]   @relation("TakeTopics")
  followers User[]   @relation("UserFollowedTopics")
  createdAt DateTime @default(now())
}

model Follow {
  id         Int      @id @default(autoincrement())
  follower   User     @relation("FollowingUsers", fields: [followerId], references: [id])
  followerId String
  followed   User     @relation("FollowerUsers", fields: [followedId], references: [id])
  followedId String
  createdAt  DateTime @default(now())

  @@unique([followerId, followedId]) // Prevents duplicate follows
}

enum TakeStatus {
  OPEN
  CLOSED
}

enum ArgumentType {
  SUPPORT
  CRITIQUE
}