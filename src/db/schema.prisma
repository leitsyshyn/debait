datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}
 
model User {
  id            String          @id @default(cuid())
  name      String?
  username      String?         @unique
  image         String?
  email         String          @unique
  emailVerified DateTime?
  hashedPassword String? 
  role          UserRole        @default(USER)
  isTwoFactorEnabled Boolean    @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts          Post[]
  arguments      Comment[]
  votes          Vote[]
  commentVotes   CommentVote[]
  following  Follow[]  @relation("Following")
  followers Follow[]  @relation("Followers")
  followedTags Tag[]   @relation("UserFollowedTags")
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model EmailVerificationToken {
  id         String @id @default(cuid())
  token      String @unique
  email      String
  expires    DateTime
 
  @@unique([email, token])
}

model PasswordResetToken {
  id         String @id @default(cuid())
  token      String @unique
  email      String
  expires    DateTime
 
  @@unique([email, token])
}

model TwoFactorToken {
  id         String @id @default(cuid())
  token      String @unique
  email      String
  expires    DateTime
 
  @@unique([email, token])
}

model TwoFactorConfirmation {
  if        String @id @default(cuid())
  userId    String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Post {
  id        String        @id @default(cuid())
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  status    PostStatus?
  content   String
  tags    Tag[]    @relation("PostTags")
  comments Comment[]
  votes     Vote[]
  createdAt DateTime   @default(now())
  closedAt  DateTime?
}
model Vote {
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String 
  value      Int
  createdAt  DateTime   @default(now())

  @@unique([postId, userId]) 
}
model Comment {
  id        String    @id @default(cuid())
  user    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String 
  content   String
  type      CommentType
  votes     CommentVote[]
  createdAt DateTime   @default(now())
}
model CommentVote {
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  comment    Comment    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  String 
  value      Int
  createdAt  DateTime   @default(now())

  @@unique([commentId, userId]) 
}



model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  Posts     Post[]   @relation("PostTags")
  followers User[]   @relation("UserFollowedTags")
  createdAt DateTime @default(now())
}

model Follow {
  id         Int      @id @default(autoincrement())
  follower   User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  following   User     @relation("Followers", fields: [followindId], references: [id], onDelete: Cascade)
  followindId String @map("followedId")
  createdAt  DateTime @default(now())

  @@unique([followerId, followindId]) 
}

enum PostStatus {
  OPEN
  CLOSED
}

enum CommentType {
  SUPPORT
  OPPOSE
  CLARIFY
}