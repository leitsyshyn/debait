// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  username       String           @unique
  email          String           @unique
  password       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  takes          Take[]           // User's posted takes
  arguments      Argument[]       // User's arguments on takes
  votes          ArgumentVote[]   // Votes cast by the user on arguments

  followedUsers  UserFollow[]     @relation("UserFollowsFollower")
  followingUsers UserFollow[]     @relation("UserFollowsFollowing")
  followedTopics TopicFollow[]    // Topics followed by the user

  @@map("users")
}

model Take {
  id             Int              @id @default(autoincrement())
  title          String
  content        String
  status         Status           @default(ONGOING) 
  authorId       Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  author         User             @relation(fields: [authorId], references: [id])
  arguments      Argument[]       // Arguments posted on this take
  topics         TakeTopic[]      // Topics associated with this take

  @@map("takes")
}

model Argument {
  id             Int              @id @default(autoincrement())
  content        String
  userId         Int
  takeId         Int
  createdAt      DateTime         @default(now())

  author         User             @relation(fields: [userId], references: [id])
  take           Take             @relation(fields: [takeId], references: [id])
  votes          ArgumentVote[]   // Votes on this argument

  @@map("arguments")
}

model ArgumentVote {
  userId         Int
  argumentId     Int
  type           Int              // 1 for upvote, -1 for downvote
  createdAt      DateTime         @default(now())

  user           User             @relation(fields: [userId], references: [id])
  argument       Argument         @relation(fields: [argumentId], references: [id])

  @@id([userId, argumentId])      // Composite primary key

  @@map("argument_votes")
}

model Topic {
  id             Int              @id @default(autoincrement())
  name           String           @unique

  followers      TopicFollow[]    // Users following this topic
  takes          TakeTopic[]      // Takes associated with this topic

  @@map("topics")
}

model TakeTopic {
  takeId         Int
  topicId        Int

  take           Take             @relation(fields: [takeId], references: [id])
  topic          Topic            @relation(fields: [topicId], references: [id])

  @@id([takeId, topicId])         // Composite primary key

  @@map("take_topics")
}

model TopicFollow {
  userId         Int
  topicId        Int
  createdAt      DateTime         @default(now())

  user           User             @relation(fields: [userId], references: [id])
  topic          Topic            @relation(fields: [topicId], references: [id])

  @@id([userId, topicId])         // Composite primary key

  @@map("topic_follows")
}

model UserFollow {
  followerId     Int
  followingId    Int
  createdAt      DateTime         @default(now())

  follower       User             @relation("UserFollowsFollower", fields: [followerId], references: [id])
  following      User             @relation("UserFollowsFollowing", fields: [followingId], references: [id])

  @@id([followerId, followingId]) // Composite primary key

  @@map("user_follows")
}

enum Status {
  ONGOING
  CLOSED
}